// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenCredentialPublisher.Data.Custom.Contexts;

#nullable disable

namespace OpenCredentialPublisher.Data.Custom.Migrations
{
    [DbContext(typeof(WalletDbContext))]
    [Migration("20240731134030_ViewsFromClasses")]
    partial class ViewsFromClasses
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.Achievement", b =>
                {
                    b.Property<long>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AchievementId"));

                    b.Property<string>("AchievementType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Unspecified");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<long?>("CreatorProfileId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldOfStudy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SourceProfileId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("VerifiableCredentialId")
                        .HasColumnType("bigint");

                    b.HasKey("AchievementId");

                    b.HasIndex("CreatorProfileId");

                    b.HasIndex("SourceProfileId");

                    b.HasIndex("VerifiableCredentialId")
                        .IsUnique();

                    b.ToTable("Achievement", "cred2");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.AchievementAlignment", b =>
                {
                    b.Property<long>("AchievementAlignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AchievementAlignmentId"));

                    b.Property<long>("AchievementId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TargetCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetFramework")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AchievementAlignmentId");

                    b.HasIndex("AchievementId");

                    b.ToTable("AchievementAlignment", "cred2");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.AchievementIdentity", b =>
                {
                    b.Property<long>("AchievementIdentityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AchievementIdentityId"));

                    b.Property<long>("AchievementId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AchievementIdentityId");

                    b.HasIndex("AchievementId")
                        .IsUnique();

                    b.ToTable("AchievementIdentity", "cred2");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.Authorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorizationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeVerifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Endpoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Payload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scopes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceForeignKey")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceForeignKey");

                    b.HasIndex("UserId");

                    b.ToTable("Authorization", "cred2");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.CredentialCollection", b =>
                {
                    b.Property<long>("CredentialCollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CredentialCollectionId"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CredentialCollectionId");

                    b.HasIndex("UserId");

                    b.ToTable("CredentialCollection", "cred2");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.CredentialCollectionVerifiableCredential", b =>
                {
                    b.Property<long>("CredentialCollectionId")
                        .HasColumnType("bigint");

                    b.Property<long>("VerifiableCredentialId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CredentialCollectionId", "VerifiableCredentialId");

                    b.HasIndex("VerifiableCredentialId");

                    b.ToTable("CredentialCollectionVerifiableCredential", "cred2");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.CredentialPackage", b =>
                {
                    b.Property<long>("CredentialPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CredentialPackageId"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CredentialPackageId");

                    b.HasIndex("UserId");

                    b.ToTable("CredentialPackage", "cred2");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.Evidence", b =>
                {
                    b.Property<long>("EvidenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EvidenceId"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("EvidenceUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("VerifiableCredentialId")
                        .HasColumnType("bigint");

                    b.HasKey("EvidenceId");

                    b.HasIndex("VerifiableCredentialId");

                    b.ToTable("Evidence", "cred2");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.LoginLink", b =>
                {
                    b.Property<long>("LoginLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LoginLinkId"));

                    b.Property<bool>("Claimed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReturnUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("ValidUntil")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("LoginLinkId");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("LoginLink", "cred2");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "body");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Recipient")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "recipient");

                    b.Property<int>("SendAttempts")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "subject");

                    b.HasKey("Id");

                    b.ToTable("Message", "cred2");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.Notification", b =>
                {
                    b.Property<long>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NotificationId"));

                    b.Property<int>("AchievementCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("IssuerImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IssuerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Json")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", "cred2");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.Profile", b =>
                {
                    b.Property<long>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProfileId"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProfileId");

                    b.ToTable("Profile", "cred2");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.SearchCredential", b =>
                {
                    b.Property<long>("VerifiableCredentialId")
                        .HasColumnType("bigint");

                    b.Property<string>("AchievementType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("CredentialPackageId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("EffectiveAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EffectiveAtYear")
                        .HasColumnType("int");

                    b.Property<string>("IssuerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Json")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VerifiableCredentialId");

                    b.ToTable((string)null);

                    b.ToView("SearchCredentialView", "cred2");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.SearchCredentialCollection", b =>
                {
                    b.Property<long>("CredentialCollectionId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShareCount")
                        .HasColumnType("int");

                    b.HasKey("CredentialCollectionId");

                    b.ToTable((string)null);

                    b.ToView("SearchCredentialCollectionView", "cred2");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.SearchCredentialPackage", b =>
                {
                    b.Property<long>("CredentialPackageId")
                        .HasColumnType("bigint");

                    b.Property<int>("AchievementCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("EffectiveAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EffectiveImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("IssuerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Json")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShareCount")
                        .HasColumnType("int");

                    b.HasKey("CredentialPackageId");

                    b.ToTable((string)null);

                    b.ToView("SearchCredentialPackageView", "cred2");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.SearchCredentialPackageAchievementType", b =>
                {
                    b.Property<long>("CredentialPackageId")
                        .HasColumnType("bigint");

                    b.Property<string>("AchievementType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CredentialPackageId");

                    b.ToTable((string)null);

                    b.ToView("SearchCredentialPackageAchievementTypeView", "cred2");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.SearchCredentialPackageIssuer", b =>
                {
                    b.Property<long>("CredentialPackageId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("EffectiveAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EffectiveAtYear")
                        .HasColumnType("int");

                    b.Property<string>("IssuerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CredentialPackageId");

                    b.ToTable((string)null);

                    b.ToView("SearchCredentialPackageIssuerView", "cred2");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.Share", b =>
                {
                    b.Property<long>("ShareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ShareId"));

                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ShareSecureHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ShareId");

                    b.HasIndex("UserId");

                    b.ToTable("Share", "cred2");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.ShareCredentialCollection", b =>
                {
                    b.Property<long>("ShareId")
                        .HasColumnType("bigint");

                    b.Property<long>("CredentialCollectionId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ShareId", "CredentialCollectionId");

                    b.HasIndex("CredentialCollectionId");

                    b.ToTable("ShareCredentialCollection", "cred2");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.ShareVerifiableCredential", b =>
                {
                    b.Property<long>("ShareId")
                        .HasColumnType("bigint");

                    b.Property<long>("VerifiableCredentialId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ShareId", "VerifiableCredentialId");

                    b.HasIndex("VerifiableCredentialId");

                    b.ToTable("ShareVerifiableCredential", "cred2");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeletable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scope")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Source", "cred2");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.VerifiableCredential", b =>
                {
                    b.Property<long>("VerifiableCredentialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VerifiableCredentialId"));

                    b.Property<DateTimeOffset?>("AwardedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<long>("CredentialPackageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("IssuerProfileId")
                        .HasColumnType("bigint");

                    b.Property<string>("Json")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentVerifiableCredentialId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ValidFromDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset?>("ValidUntilDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("VerifiableCredentialId");

                    b.HasIndex("CredentialPackageId");

                    b.HasIndex("IssuerProfileId");

                    b.HasIndex("ParentVerifiableCredentialId");

                    b.ToTable("VerifiableCredential", "cred2");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.HttpClientLog", b =>
                {
                    b.Property<int>("HttpClientLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HttpClientLogId"));

                    b.Property<string>("Machine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestContentBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestHeaders")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestRouteData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestRouteTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RequestTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseContentBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseHeaders")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResponseStatusCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResponseTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HttpClientLogId");

                    b.ToTable("HttpClientLogs");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Models.StatusModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Accepted"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Used"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Expired"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Created"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Deleted"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Visible"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Hidden"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Submitted"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Sent"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Error"
                        },
                        new
                        {
                            Id = 14,
                            Name = "WaitingForScoreReport"
                        },
                        new
                        {
                            Id = 15,
                            Name = "ReadyForVerification"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Verified"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Unused"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Success"
                        },
                        new
                        {
                            Id = 19,
                            Name = "NeedsEndorsement"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Read"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Unread"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenCredentialPublisher.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.Achievement", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Custom.EFModels.Profile", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorProfileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OpenCredentialPublisher.Data.Custom.EFModels.Profile", "Source")
                        .WithMany()
                        .HasForeignKey("SourceProfileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OpenCredentialPublisher.Data.Custom.EFModels.VerifiableCredential", "VerifiableCredential")
                        .WithOne("Achievement")
                        .HasForeignKey("OpenCredentialPublisher.Data.Custom.EFModels.Achievement", "VerifiableCredentialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Source");

                    b.Navigation("VerifiableCredential");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.AchievementAlignment", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Custom.EFModels.Achievement", "Achievement")
                        .WithMany("Alignments")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Achievement");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.AchievementIdentity", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Custom.EFModels.Achievement", "Achievement")
                        .WithOne("Identifier")
                        .HasForeignKey("OpenCredentialPublisher.Data.Custom.EFModels.AchievementIdentity", "AchievementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Achievement");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.Authorization", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Custom.EFModels.Source", "Source")
                        .WithMany("Authorizations")
                        .HasForeignKey("SourceForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenCredentialPublisher.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Source");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.CredentialCollection", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.CredentialCollectionVerifiableCredential", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Custom.EFModels.CredentialCollection", "CredentialCollection")
                        .WithMany("CredentialCollectionVerifiableCredentials")
                        .HasForeignKey("CredentialCollectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OpenCredentialPublisher.Data.Custom.EFModels.VerifiableCredential", "VerifiableCredential")
                        .WithMany("CredentialCollectionVerifiableCredentials")
                        .HasForeignKey("VerifiableCredentialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CredentialCollection");

                    b.Navigation("VerifiableCredential");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.CredentialPackage", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.Evidence", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Custom.EFModels.VerifiableCredential", "VerifiableCredential")
                        .WithMany("Evidences")
                        .HasForeignKey("VerifiableCredentialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VerifiableCredential");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.LoginLink", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Custom.EFModels.Message", null)
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("OpenCredentialPublisher.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.Notification", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.SearchCredentialPackageAchievementType", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Custom.EFModels.SearchCredentialPackage", null)
                        .WithMany("AchievementTypes")
                        .HasForeignKey("CredentialPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.SearchCredentialPackageIssuer", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Custom.EFModels.SearchCredentialPackage", null)
                        .WithMany("Issuers")
                        .HasForeignKey("CredentialPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.Share", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.ShareCredentialCollection", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Custom.EFModels.CredentialCollection", "CredentialCollection")
                        .WithMany("ShareCredentialCollections")
                        .HasForeignKey("CredentialCollectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OpenCredentialPublisher.Data.Custom.EFModels.Share", "Share")
                        .WithMany("ShareCredentialCollections")
                        .HasForeignKey("ShareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CredentialCollection");

                    b.Navigation("Share");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.ShareVerifiableCredential", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Custom.EFModels.Share", "Share")
                        .WithMany("ShareVerifiableCredentials")
                        .HasForeignKey("ShareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OpenCredentialPublisher.Data.Custom.EFModels.VerifiableCredential", "VerifiableCredential")
                        .WithMany("ShareVerifiableCredentials")
                        .HasForeignKey("VerifiableCredentialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Share");

                    b.Navigation("VerifiableCredential");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.VerifiableCredential", b =>
                {
                    b.HasOne("OpenCredentialPublisher.Data.Custom.EFModels.CredentialPackage", "CredentialPackage")
                        .WithMany("VerifiableCredentials")
                        .HasForeignKey("CredentialPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OpenCredentialPublisher.Data.Custom.EFModels.Profile", "IssuerProfile")
                        .WithMany()
                        .HasForeignKey("IssuerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OpenCredentialPublisher.Data.Custom.EFModels.VerifiableCredential", "ParentVerifiableCredential")
                        .WithMany()
                        .HasForeignKey("ParentVerifiableCredentialId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CredentialPackage");

                    b.Navigation("IssuerProfile");

                    b.Navigation("ParentVerifiableCredential");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.Achievement", b =>
                {
                    b.Navigation("Alignments");

                    b.Navigation("Identifier");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.CredentialCollection", b =>
                {
                    b.Navigation("CredentialCollectionVerifiableCredentials");

                    b.Navigation("ShareCredentialCollections");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.CredentialPackage", b =>
                {
                    b.Navigation("VerifiableCredentials");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.SearchCredentialPackage", b =>
                {
                    b.Navigation("AchievementTypes");

                    b.Navigation("Issuers");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.Share", b =>
                {
                    b.Navigation("ShareCredentialCollections");

                    b.Navigation("ShareVerifiableCredentials");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.Source", b =>
                {
                    b.Navigation("Authorizations");
                });

            modelBuilder.Entity("OpenCredentialPublisher.Data.Custom.EFModels.VerifiableCredential", b =>
                {
                    b.Navigation("Achievement");

                    b.Navigation("CredentialCollectionVerifiableCredentials");

                    b.Navigation("Evidences");

                    b.Navigation("ShareVerifiableCredentials");
                });
#pragma warning restore 612, 618
        }
    }
}
